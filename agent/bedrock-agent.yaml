# cloudformation-template.yaml
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Bedrock Agent with Claude for City Geocoding using OpenCage, Google Maps, or Nominatim APIs'

Parameters:
  AgentName:
    Type: String
    Default: city-coordinates-agent
    Description: Name of the Bedrock agent
    AllowedPattern: ^[a-zA-Z0-9-]+$
    ConstraintDescription: Agent name must contain only alphanumeric characters and hyphens

  GeocodingProvider:
    Type: String
    Default: opencage
    AllowedValues:
      - opencage
      - google
      - nominatim
    Description: Preferred geocoding provider (opencage, google, or nominatim)

  OpenCageApiKey:
    Type: String
    Default: ''
    NoEcho: true
    Description: OpenCage API key (optional, leave empty if not using)

  GoogleMapsApiKey:
    Type: String
    Default: ''
    NoEcho: true
    Description: Google Maps API key (optional, leave empty if not using)

  LambdaTimeout:
    Type: Number
    Default: 30
    MinValue: 3
    MaxValue: 900
    Description: Lambda function timeout in seconds

  LambdaMemorySize:
    Type: Number
    Default: 256
    AllowedValues: [128, 256, 512, 1024, 2048, 3008]
    Description: Lambda function memory size in MB

  LogRetentionDays:
    Type: Number
    Default: 14
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
    Description: CloudWatch Logs retention in days

  ClaudeModelId:
    Type: String
    Default: anthropic.claude-3-5-sonnet-20241022-v2:0
    AllowedValues:
      - anthropic.claude-3-5-sonnet-20241022-v2:0
      - anthropic.claude-3-sonnet-20240229-v1:0
      - anthropic.claude-3-haiku-20240307-v1:0
    Description: Claude model to use for the agent

  Environment:
    Type: String
    Default: production
    AllowedValues:
      - development
      - staging
      - production
    Description: Environment name

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: Agent Configuration
        Parameters:
          - AgentName
          - ClaudeModelId
          - Environment
      - Label:
          default: Geocoding API Configuration
        Parameters:
          - GeocodingProvider
          - OpenCageApiKey
          - GoogleMapsApiKey
      - Label:
          default: Lambda Configuration
        Parameters:
          - LambdaTimeout
          - LambdaMemorySize
          - LogRetentionDays

Conditions:
  HasOpenCageKey: !Not [!Equals [!Ref OpenCageApiKey, '']]
  HasGoogleKey: !Not [!Equals [!Ref GoogleMapsApiKey, '']]

Resources:
  # ==================== LAMBDA RESOURCES ====================
  
  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AgentName}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaVPCAccessExecutionRole
      Tags:
        - Key: Name
          Value: !Sub '${AgentName}-lambda-role'
        - Key: Environment
          Value: !Ref Environment

  # CloudWatch Logs for Lambda
  LambdaLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${AgentName}-function'
      RetentionInDays: !Ref LogRetentionDays

  # Lambda Function
  CityCoordinatesFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AgentName}-function'
      Description: Lambda function to retrieve city coordinates using geocoding APIs
      Runtime: python3.11
      Handler: lambda_function.lambda_handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: !Ref LambdaTimeout
      MemorySize: !Ref LambdaMemorySize
      Environment:
        Variables:
          OPENCAGE_API_KEY: !Ref OpenCageApiKey
          GOOGLE_MAPS_API_KEY: !Ref GoogleMapsApiKey
          GEOCODING_PROVIDER: !Ref GeocodingProvider
          LOG_LEVEL: INFO
      Code:
        ZipFile: |
          # Placeholder - will be replaced with actual code during deployment
          import json
          def lambda_handler(event, context):
              return {
                  'statusCode': 200,
                  'body': json.dumps('Placeholder - upload actual code')
              }
      Tags:
        - Key: Name
          Value: !Sub '${AgentName}-lambda'
        - Key: Environment
          Value: !Ref Environment
    DependsOn: LambdaLogGroup

  # Lambda Permission for Bedrock
  LambdaBedrockPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref CityCoordinatesFunction
      Action: lambda:InvokeFunction
      Principal: bedrock.amazonaws.com
      SourceArn: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'

  # ==================== BEDROCK AGENT RESOURCES ====================

  # Bedrock Agent Execution Role
  BedrockAgentRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${AgentName}-bedrock-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                Resource:
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/${ClaudeModelId}'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-sonnet-20240229-v1:0'
                  - !Sub 'arn:aws:bedrock:${AWS::Region}::foundation-model/anthropic.claude-3-5-sonnet-20241022-v2:0'
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !GetAtt CityCoordinatesFunction.Arn
      Tags:
        - Key: Name
          Value: !Sub '${AgentName}-bedrock-role'
        - Key: Environment
          Value: !Ref Environment

  # S3 Bucket for OpenAPI Schema
  OpenAPIBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${AgentName}-openapi-${AWS::AccountId}'
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      Tags:
        - Key: Name
          Value: !Sub '${AgentName}-openapi-bucket'
        - Key: Environment
          Value: !Ref Environment

  # Bedrock Agent
  CityCoordinatesAgent:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: !Ref AgentName
      Description: AI agent to find geographic coordinates of cities worldwide using professional geocoding APIs
      AgentResourceRoleArn: !GetAtt BedrockAgentRole.Arn
      FoundationModel: !Ref ClaudeModelId
      IdleSessionTTLInSeconds: 900
      Instruction: |
        You are a professional geographic information assistant that helps users find accurate latitude 
        and longitude coordinates for cities worldwide.
        
        Your capabilities:
        1. Look up coordinates for any city using authoritative geocoding APIs (OpenCage, Google Maps, or Nominatim)
        2. Provide detailed location information including country, state/region, and formatted address
        3. Calculate straight-line distances between two cities in both kilometers and miles
        4. Handle ambiguous city names by providing context or asking for clarification
        
        When responding to coordinate requests:
        - Always provide coordinates with at least 4 decimal places for accuracy (e.g., 40.7128°N, 74.0060°W)
        - Include the data source and confidence level when available
        - Always mention the country to avoid confusion with cities of the same name
        - For distance calculations, clarify that it's straight-line distance (as the crow flies), not driving distance
        - If a city cannot be found, politely suggest checking the spelling or providing more context (like state or country)
        
        Response format guidelines:
        - Be conversational, helpful, and accurate
        - Present data in a clear, organized format
        - Use bullet points or structured formatting for multiple data points
        - Include relevant context (timezone, country, region) when helpful
        
        Example response format:
        "I found the coordinates for Tokyo, Japan:
        • Latitude: 35.6762°N
        • Longitude: 139.6503°E
        • Country: Japan
        • Formatted Address: Tokyo, Japan
        • Timezone: Asia/Tokyo
        • Data Source: [API name]
        
        Is there anything else you'd like to know about this location?"
        
        For distance queries, include both the coordinates and the calculated distance.
      Tags:
        Environment: !Ref Environment
        Purpose: geocoding
        ManagedBy: CloudFormation
    DependsOn:
      - BedrockAgentRole
      - CityCoordinatesFunction

  # Bedrock Agent Action Group
  CityCoordinatesActionGroup:
    Type: AWS::Bedrock::AgentActionGroup
    Properties:
      ActionGroupName: CityCoordinatesActions
      Description: Actions to retrieve city coordinates and calculate distances using geocoding APIs
      AgentId: !GetAtt CityCoordinatesAgent.AgentId
      AgentVersion: DRAFT
      ActionGroupState: ENABLED
      ActionGroupExecutor:
        Lambda: !GetAtt CityCoordinatesFunction.Arn
      ApiSchema:
        S3:
          S3BucketName: !Ref OpenAPIBucket
          S3ObjectKey: openapi_schema.yaml
      SkipResourceInUseCheckOnDelete: true
    DependsOn:
      - CityCoordinatesAgent
      - LambdaBedrockPermission

  # Custom Resource to Prepare Agent
  PrepareAgentFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub '${AgentName}-prepare-agent'
      Runtime: python3.11
      Handler: index.handler
      Role: !GetAtt PrepareAgentLambdaRole.Arn
      Timeout: 60
      Code:
        ZipFile: |
          import boto3
          import cfnresponse
          import time
          
          def handler(event, context):
              print(f"Event: {event}")
              
              bedrock = boto3.client('bedrock-agent')
              agent_id = event['ResourceProperties']['AgentId']
              
              try:
                  if event['RequestType'] in ['Create', 'Update']:
                      # Prepare the agent
                      print(f"Preparing agent: {agent_id}")
                      response = bedrock.prepare_agent(agentId=agent_id)
                      print(f"Prepare response: {response}")
                      
                      # Wait for agent to be ready
                      time.sleep(10)
                      
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {
                          'AgentStatus': response['agentStatus'],
                          'PreparedAt': response['preparedAt'].isoformat() if 'preparedAt' in response else ''
                      })
                  else:
                      cfnresponse.send(event, context, cfnresponse.SUCCESS, {})
                      
              except Exception as e:
                  print(f"Error: {str(e)}")
                  cfnresponse.send(event, context, cfnresponse.FAILED, {
                      'Error': str(e)
                  })

  PrepareAgentLambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: PrepareAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:PrepareAgent
                  - bedrock:GetAgent
                Resource: !Sub 'arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*'

  PrepareAgent:
    Type: Custom::PrepareAgent
    Properties:
      ServiceToken: !GetAtt PrepareAgentFunction.Arn
      AgentId: !GetAtt CityCoordinatesAgent.AgentId
    DependsOn:
      - CityCoordinatesActionGroup

  # Bedrock Agent Alias
  CityCoordinatesAgentAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentId: !GetAtt CityCoordinatesAgent.AgentId
      AgentAliasName: production
      Description: Production alias for city coordinates geocoding agent
      Tags:
        Environment: !Ref Environment
        Version: v1
    DependsOn:
      - PrepareAgent

  # ==================== SECRETS MANAGER (OPTIONAL) ====================

  # Store API Keys in Secrets Manager (more secure than environment variables)
  ApiKeysSecret:
    Type: AWS::SecretsManager::Secret
    Condition: HasOpenCageKey
    Properties:
      Name: !Sub '${AgentName}/api-keys'
      Description: API keys for geocoding services
      SecretString: !Sub |
        {
          "opencage_api_key": "${OpenCageApiKey}",
          "google_maps_api_key": "${GoogleMapsApiKey}"
        }
      Tags:
        - Key: Name
          Value: !Sub '${AgentName}-api-keys'
        - Key: Environment
          Value: !Ref Environment

  # ==================== CLOUDWATCH ALARMS ====================

  # Lambda Error Alarm
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AgentName}-lambda-errors'
      AlarmDescription: Alert when Lambda function has errors
      MetricName: Errors
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 5
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CityCoordinatesFunction
      TreatMissingData: notBreaching

  # Lambda Throttle Alarm
  LambdaThrottleAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AgentName}-lambda-throttles'
      AlarmDescription: Alert when Lambda function is throttled
      MetricName: Throttles
      Namespace: AWS/Lambda
      Statistic: Sum
      Period: 300
      EvaluationPeriods: 1
      Threshold: 10
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CityCoordinatesFunction
      TreatMissingData: notBreaching

  # Lambda Duration Alarm
  LambdaDurationAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub '${AgentName}-lambda-duration'
      AlarmDescription: Alert when Lambda function execution time is high
      MetricName: Duration
      Namespace: AWS/Lambda
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 25000  # 25 seconds
      ComparisonOperator: GreaterThanThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref CityCoordinatesFunction
      TreatMissingData: notBreaching

Outputs:
  AgentId:
    Description: Bedrock Agent ID
    Value: !GetAtt CityCoordinatesAgent.AgentId
    Export:
      Name: !Sub '${AWS::StackName}-AgentId'

  AgentArn:
    Description: Bedrock Agent ARN
    Value: !GetAtt CityCoordinatesAgent.AgentArn
    Export:
      Name: !Sub '${AWS::StackName}-AgentArn'

  AgentAliasId:
    Description: Bedrock Agent Alias ID
    Value: !GetAtt CityCoordinatesAgentAlias.AgentAliasId
    Export:
      Name: !Sub '${AWS::StackName}-AgentAliasId'

  AgentAliasArn:
    Description: Bedrock Agent Alias ARN
    Value: !GetAtt CityCoordinatesAgentAlias.AgentAliasArn
    Export:
      Name: !Sub '${AWS::StackName}-AgentAliasArn'

  LambdaFunctionName:
    Description: Lambda function name
    Value: !Ref CityCoordinatesFunction
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionName'

  LambdaFunctionArn:
    Description: Lambda function ARN
    Value: !GetAtt CityCoordinatesFunction.Arn
    Export:
      Name: !Sub '${AWS::StackName}-LambdaFunctionArn'

  OpenAPIBucketName:
    Description: S3 bucket for OpenAPI schema
    Value: !Ref OpenAPIBucket
    Export:
      Name: !Sub '${AWS::StackName}-OpenAPIBucket'

  TestCommand:
    Description: Command to test the agent
    Value: !Sub |
      python test_agent.py --agent-id ${CityCoordinatesAgent.AgentId} --alias-id ${CityCoordinatesAgentAlias.AgentAliasId} --region ${AWS::Region}

  ApiKeysSecretArn:
    Description: Secrets Manager ARN for API keys
    Value: !If [HasOpenCageKey, !Ref ApiKeysSecret, 'N/A']
    Export:
      Name: !Sub '${AWS::StackName}-ApiKeysSecret'